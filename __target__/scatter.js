'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,
getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";var __name__="__main__";export var default_options=dict(__kwargtrans__({min:0,max:1,colorscale:["yellow","red","black"],color_prop:"value",popup_prop:"popup",circle_options:dict(__kwargtrans__({fillOpacity:1,stroke:false,radius:5}))}));export var _resolve_options=
function(x,y){if(y===null)return x;var z=dict(x);z.py_update(y);return z};export var _get_color=function(options,value){var csc=chroma.scale(options.colorscale).domain([options.min,options.max]);return csc(value)};export var bind_popup=function(feature,layer,context){var options=_resolve_options(default_options,context.props.hideout);if(feature.properties&&feature.properties[options.popup_prop]){var value=feature.properties[options.popup_prop];if(Number.isFinite(value))var value=value.toString();
layer.bindPopup(value)}};export var point_to_layer=function(feature,latlng,context){var options=_resolve_options(default_options,context.props.hideout);var circle_options=dict(options.circle_options);circle_options.fillColor=_get_color(options,feature.properties[options.color_prop]);return L.circleMarker(latlng,circle_options)};export var cluster_to_layer=function(feature,latlng,index,context){var options=_resolve_options(default_options,context.props.hideout);var leaves=index.getLeaves(feature.properties.cluster_id);
var value_sum=0;for(var leaf of leaves)value_sum+=leaf.properties[options.color_prop];var value_mean=value_sum/len(leaves);var icon=L.divIcon.scatter(dict(__kwargtrans__({html:"<div><span>"+feature.properties.point_count_abbreviated+"</span></div>",className:"marker-cluster",iconSize:L.point(40,40),color:_get_color(options,value_mean)})));return L.marker(latlng,dict(__kwargtrans__({icon:icon})))};

//# sourceMappingURL=scatter.map